name: Java CI with Gradle

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'

env:
  BUCKET_NAME: ${{secrets.BUCKET_NAME}}
  CD_APPLICATION_NAME: ${{secrets.CD_APPLICATION_NAME}}
  CD_GROUP_NAME: ${{secrets.CD_GROUP_NAME}}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4
      - run : ls -al

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'oracle'
          cache: 'gradle'

      - name: set security-yml
        run: |
          echo "${{ secrets.APPLICATION_SECURITY_YML }}" | base64 --decode > api-module/src/main/resources/application-security.yml

      - name: set db-yml
        run: |
          echo "${{ secrets.APPLICATION_DB_YML }}" | base64 --decode > domain-quiz-module/src/main/resources/application-db.yml

      - name: mkdir deploy folder
        run: mkdir -p deploy

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: grant execute permission for gradlew
        run: chmod +x gradlew

      - name: build with Gradle Wrapper
        run: ./gradlew build -x test

      - name: show location
        run: pwd

      - name: copy jar
        run: cp ./api-module/build/libs/*.jar ./deploy

      - name: copy appspec.yml&deploy.sh
        run: |
          cp ./scripts/*.sh ./deploy
          cp ./scripts/*.yml ./deploy

      - name: copy docker-compose.yml
        run: | 
          cp ./docker/docker-compose.blue.yml ./deploy
          cp ./docker/docker-compose.green.yml ./deploy

      - name: zip files
        run: zip -r app.zip ./deploy

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.REGION }}
          role-to-assume: ${{ secrets.ROLE }}

      - name: sync bucket
        run: |
          aws s3 sync --region ap-northeast-2 app.zip s3://$BUCKET_NAME/be --delete

      - name: start codedeploy
        run: |
          aws deploy create-deployment \
          --application-name $CD_APPLICATION_NAME \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name $CD_GROUP_NAME \
          --file-exists-behavior OVERWRITE \
          --s3-location bucket=$BUCKET_NAME
